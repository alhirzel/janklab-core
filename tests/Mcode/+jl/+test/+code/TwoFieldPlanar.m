classdef TwoFieldPlanar < jl.code.PlanarClassBase & jl.util.Displayable
    
    % @planarclass
    
    properties
        x = NaN; % @planar
        y = NaN; % @planar
    end
    
    methods
        function this = TwoFieldPlanar(x, y)
        if nargin == 0
            return;
        end
        this.x = x;
        this.y = y;
        end
        
        function out = isnan(this)
        out = isnan(this.x) | isnan(this.y);
        end
        
        function out = dispstrs(this)
        out = cell(size(this));
        for i = 1:numel(this)
            out{i} = sprintf('%g:%g', this.x(i), this.y(i));
        end
        end
        
        function prettyprint(this)
        disp(dispstrs(this));
        end
    end
    

    %%%%% START PLANAR-CLASS BOILERPLATE CODE %%%%%
    
    % This section contains code auto-generated by Janklab's genPlanarClass.
    % Do not edit code in this section manually.
    % Do not remove the "%%%%% START/END .... %%%%%" header or footer either;
    % that will cause the code regeneration to break.
    % To update this code, re-run jl.code.genPlanarClass() on this file.
    
    methods (Access=protected)
    
        function [out,fieldNames] = getPlanarFields(this)
        %GETPLANARFIELDS Get the values and names of this' planar fields
        out = {
            this.x
            this.y
        }';
        if nargout > 1
            fieldNames = {'x' 'y'};
        end
        end
        
        function out = getFirstPlanarField(this)
        %GETFIRSTPLANARFIELD Gets the first planar field
        out = this.x;
        end
        
        function this = asgnPlanarFields(this, values)
        %ASGNPLANARFIELDS Assign values in to planar fields
        this.x = values{1};
        this.y = values{2};
        end
        
        function varargout = promoteArgs(varargin)
        %PROMOTEARGS Promote all inputs to the method dispatch class
        varargout = varargin;
        for i = 1:nargin
            if ~isa(varargin{i}, 'jl.test.code.TwoFieldPlanar')
                varargout{i} = jl.test.code.TwoFieldPlanar(varargin{i});
            end
        end
        end
    
    end
    
    %%%%% END PLANAR-CLASS BOILERPLATE CODE %%%%%

end



