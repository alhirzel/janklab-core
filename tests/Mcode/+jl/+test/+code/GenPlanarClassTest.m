classdef GenPlanarClassTest < jl.unittest.TestCase
    % Tests jl.code.genPlanarClass
    
    methods (TestMethodSetup)
        function createClassDefinitions(t) %#ok<MANU>
            thisDir = fileparts(mfilename('fullpath'));
            copyfile([thisDir '/ThreeFieldPlanar-orig.m'], [thisDir '/ThreeFieldPlanar.m']);
            jl.code.genPlanarClass('jl.test.code.ThreeFieldPlanar');
        end
    end
    
    methods (Test)
        
        function testSorting(t)
        
        t.v(true, 'genPlanarClass(ThreeFieldPlanar) ran without error');
        
        x = jl.test.code.ThreeFieldPlanar( ...
            [4 4 4 2 2], ...
            [2 2 1 3 1], ...
            [2 1 1 1 1]);
        expectSortedX = jl.test.code.ThreeFieldPlanar( ...
            [2 2 4 4 4], ...
            [1 3 1 2 2], ...
            [1 1 1 1 2]);
        sx = sort(x);
        t.verifySize(sx, [1 5]);
        t.verifyEqual(sx, expectSortedX);
        
        end
        
        function testThatNansSortLastAndAreStable(t)
        x = jl.test.code.ThreeFieldPlanar( ...
            [4 4 4 2 2], ...
            [2 2 NaN 3 1], ...
            [2 1 1 1 1]);
        expectSortedX = jl.test.code.ThreeFieldPlanar( ...
            [2 2 4 4 4], ...
            [1 3 2 2 NaN], ...
            [1 1 1 2 1]);
        sx = sort(x);
        t.verifySize(sx, [1 5]);
        t.verifyEqualN(sx, expectSortedX);
        x = jl.test.code.ThreeFieldPlanar( ...
            [4 4 4   2 2   2], ...
            [2 2 NaN 3 NaN 1], ...
            [2 1 8   1 1   1]);
        expectSortedX = jl.test.code.ThreeFieldPlanar( ...
            [2 2 4 4 4   2   ], ...
            [1 3 2 2 NaN NaN ], ...
            [1 1 1 2 8   1   ]);
        sx = sort(x);
        t.verifySize(sx, [1 6]);
        t.verifyEqualN(sx, expectSortedX);
        end
        
    end
end